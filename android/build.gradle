// Android pEp JNI adapter Aar gradle build script

import org.apache.tools.ant.taskdefs.condition.Os

def pEpEngineSrc = hasProperty('pEpEngineSrc') ? pEpEngineSrc : "../../pEpEngine"
def buildAutomatic = hasProperty('buildAutomatic') ? buildAutomatic : "true"
def pEpAppPackageName = hasProperty('pEpAppPackageName') ? pEpAppPackageName : "pep.android.k9"

def libetpanAndroid = file('external/libetpan/build-android')

def pEpEngineAndroid = new File(new File(pEpEngineSrc), 'build-android')
def pEpEngineDB = new File(new File(pEpEngineSrc), 'db')

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
    
apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            ndkBuild {
                abiFilters "armeabi-v7a"
            }
        }
    }
    
    sourceSets {
        main {

            manifest.srcFile 'AndroidManifest.xml'

            // where to find generated Java source
            java.srcDirs = ['../src', 'src']

            assets.srcDirs = ['assets', 'external/assets']
        }
    }

    dependencies {
        compile 'commons-io:commons-io:2.4'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            jniDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments '-B', 'NDK_DEBUG=1', 'NDEBUG=null', 'NDK_LOG=1', 'NDK_APPLICATION_MK=/home/huss/src/pEpJNIAdapter/android/jni/Application.mk'
                }
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    ext {
        //FIXME> improve that build to be able to build without the need of unzip deps // Get rid of unziping
        pEpEngineZip = new File(pEpEngineAndroid, 'pEpEngine-android-1.zip')
        libEtPanZip = new File(libetpanAndroid, 'libetpan-android-1.zip')
    }

    // call source generation makefile target
    task genSources(type:Exec) {
        workingDir '../src'
        commandLine 'make', 'gensource'
    }

    task cleanGenSource(type:Exec) {
        workingDir '../src'
        commandLine 'make', 'clean'
    }

    // call external build (GnuPG, GPGME, etc)
    task buildExternal(type:Exec) {
        workingDir 'external'
        commandLine 'make', 'build', 'PEP_PACKAGE_NAME='+pEpAppPackageName
    }

    task externalAssets(type:Exec) {
        workingDir 'external'
        commandLine 'make', 'assets', 'PEP_PACKAGE_NAME='+pEpAppPackageName
    }

    task cleanExternal(type:Exec) {
        workingDir 'external'
        commandLine 'make', 'clean', 'PEP_PACKAGE_NAME='+pEpAppPackageName
    }

    task cleanExternalAssets(type:Exec) {
        workingDir 'external'
        commandLine 'make', 'clean-assets', 'PEP_PACKAGE_NAME='+pEpAppPackageName
    }

    // unzip some of the dependencies 
    task unzipDeps(type: Copy) {
        from zipTree(pEpEngineZip)
        from zipTree(libEtPanZip)
        into file("${buildDir}")
    }

    // builds pEpEnginge's system.db 
    task buildpEpEngineSystemDB(type:Exec) {
        workingDir pEpEngineDB
        commandLine 'make', 'system.db'
    }

    // copy pEpEnginge's system.db to asset 
    task cpDBAssets(type: Copy) {
        from file(new File(pEpEngineDB, 'system.db'))
        into 'assets'
    }

    // This ensures that assets are populated before collecting resources.
    preBuild.dependsOn(cpDBAssets)
    preBuild.dependsOn(externalAssets)

    unzipDeps.dependsOn buildExternal

    //Should be modified to build automatic only build external not engine or engine db

//    if(buildAutomatic=="true"){
//
//        buildpEpEngineDebug.dependsOn buildExternal
//        externalAssets.dependsOn buildExternal
//        unzipDeps.dependsOn buildpEpEngineDebug
//        cpDBAssets.dependsOn buildpEpEngineSystemDB
//
//        clean.dependsOn cleanExternal
//        clean.dependsOn cleanpEpEngine
//    }

}


