// Android pEp JNI adapter Aar gradle build script
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

def pEpEngineSrc = hasProperty('pEpEngineSrc') ? pEpEngineSrc : "../../planckCoreV3"
def libpEpTransportSrc = hasProperty('libpEpTransportSrc') ? libpEpTransportSrc : "../../libPlanckTransport"
def libCxx11Src = hasProperty('libCxx11Src') ? libCxx11Src : "../../libPlanckCxx11"
def sequoiaBackendSrc = findProperty("SEQUOIA_BACKEND_SRC") ?: "../../../../planckCoreSequoiaBackend"
def libetpanSrc = findProperty("LIBETPAN_SRC") ?: "../../../../libetpan"
def buildAutomatic = hasProperty('buildAutomatic') ? buildAutomatic : "true"
//CHeck M1 answers the correct thing off .avaialableprocessors here Libetpan seems to break
def threadsToUse = DefaultNativePlatform.currentArchitecture.arm
        ? 1 // for the moment only use
        : (hasProperty('threadsToUse')
        ? threadsToUse
        : Runtime.getRuntime().availableProcessors())

def pEpEngineDB = new File(new File(pEpEngineSrc), 'db')
def CRYPTO_LIB = "botan2"
def BOTAN_VERSION = "2.19.4_planck"
ext.archsToCompile = "arm arm64 x86 x86_64"
def SEQUOIA_TARGET = findProperty("SEQUOIA_TARGET") ?: "release"
def CORE_LOG = findProperty("CORE_LOG") ?: ""

apply from: 'gradle/plugins/set-pep-jniadapter-archs.gradle'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 31
    defaultConfig {
        minSdkVersion 30
        targetSdkVersion 31
        versionCode 7
        versionName "3.2.0"

        externalNativeBuild {
            ndkBuild {
                //abiFilters "armeabi-v7a"
                //abiFilters ["armeabi-v7a"]
                //abiFilters ["arm64-v8a, armeabi-v7a"]
            }
        }
    }

    sourceSets {
        main {

            manifest.srcFile 'AndroidManifest.xml'

            // where to find generated Java source
            java.srcDirs = ['../src', 'src', '../src/java']
            jniLibs.srcDirs = ['libs',
            //                   'external/data/data/security.pEp/app_opt/lib'
                               ]
            assets.srcDirs = ['assets', 'external/assets']
            resources.srcDirs = ['res']
        }
    }

    dependencies {
        implementation 'commons-io:commons-io:2.4'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "CRYPTO_BACK_END", "\"${CRYPTO_LIB}\""
            externalNativeBuild {
                ndkBuild {
                    arguments "-j${threadsToUse}", 'NDK_LOG=1', 'NDK_DEBUG=1', 'NDEBUG=null',
                            '--output-sync=none', '-B', 'V=1', "CRYPTO_LIB_NAME=${CRYPTO_LIB}",
                            "BOTAN_VERSION=${BOTAN_VERSION}"
                    // arguments '-B', 'NDK_DEBUG=1', 'NDEBUG=null', 'NDK_LOG=1'
                }
            }

        }

        debug {
            buildConfigField "String", "CRYPTO_BACK_END", "\"${CRYPTO_LIB}\""
            jniDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments "-j${threadsToUse}", 'NDK_LOG=1', 'NDK_DEBUG=1', 'NDEBUG=null',
                            "PEP_LOG=${CORE_LOG}", '--output-sync=none', '-B', 'V=1',
                            "CRYPTO_LIB_NAME=${CRYPTO_LIB}", "BOTAN_VERSION=${BOTAN_VERSION}"
                   // arguments '-B', 'NDK_DEBUG=1', 'NDEBUG=null', 'NDK_LOG=1'
                }
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    task genlibCxx11Sources(type:Exec) {
        workingDir "${libCxx11Src}"
        commandLine 'make', "-j${threadsToUse}", 'install'
    }

    // call source generation makefile target
    task genSources(type:Exec, dependsOn: ['genlibCxx11Sources', 'genpEpEngineAsn1Sources']) {
        workingDir '../src'
        commandLine 'make', 'lib-java'
    }

    task genlibpEpTransportSources(type:Exec) {
        workingDir "${libpEpTransportSrc}"
        commandLine 'make', "-j${threadsToUse}", 'install'
    }

    task genpEpEngineSyncSources(type:Exec, dependsOn: 'genlibpEpTransportSources') {
        workingDir "${pEpEngineSrc}"
        commandLine 'make', "-j${threadsToUse}", '-C', 'codegen'
    }


    task genpEpEngineAsn1Sources(type:Exec, dependsOn: 'genpEpEngineSyncSources') {
        workingDir "${pEpEngineSrc}"
        commandLine 'make', "-j${threadsToUse}", '-C', 'asn.1'
    }

    task cleanGenSource(type:Exec) {
        workingDir '../src'
        commandLine 'make', "-j${threadsToUse}", 'clean'
    }

    // call external build (GnuPG, GPGME, etc)
    task buildExternal(dependsOn: ['genSources']) {
        doLast {
            println("buildExternal for abis: ${project.archsToCompile}")


            exec {
                workingDir 'external'
                commandLine 'make', "-j${threadsToUse}", 'build', "archs=${project.archsToCompile}",
                        "CRYPTO_LIB_NAME=${CRYPTO_LIB}", "SEQUOIA_TARGET=${SEQUOIA_TARGET}",
                        "SEQUOIA_BACKEND_SRC=${sequoiaBackendSrc}",
                        "LIBETPAN_SRC=${libetpanSrc}", "BOTAN_VERSION=${BOTAN_VERSION}"
            }
        }
    }

    task externalAssets(type:Exec) {
        workingDir 'external'
        commandLine 'make', "-j${threadsToUse}", 'assets'
    }

    task cleanExternal(type:Exec) {
        workingDir 'external'
        commandLine 'make', "-j${threadsToUse}", 'clean'
    }

    task cleanExternalAssets(type:Exec) {
        workingDir 'external'
        commandLine 'make', 'clean-assets'
    }

    // builds pEpEnginge's system.db
    task buildpEpEngineSystemDB(type:Exec) {
        workingDir pEpEngineDB
        commandLine 'make', "-j${threadsToUse}", 'system.db'
    }

    // copy pEpEngine's system.db to asset
    task cpDBAssets(type: Copy, dependsOn: 'buildpEpEngineSystemDB') {
        from file(new File(pEpEngineDB, 'system.db'))
        into 'assets'
    }
    ndkVersion '25.1.8937393'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if(buildAutomatic == "true") {
        buildpEpEngineSystemDB.dependsOn(buildExternal)
    }
    if(isIdeBuild()) {
        buildExternal.dependsOn(setpEpJNIAdapterArchs)
    }

    // This ensures that assets are populated before collecting resources.
    preBuild.dependsOn(cpDBAssets)
    preBuild.dependsOn(externalAssets)
}

boolean isIdeBuild() {
    boolean runningFromIde = project.properties['android.injected.invoked.from.ide'] == 'true'
    if (runningFromIde) {
        println("GRADLE RUNNING FROM IDE")
    }
    return runningFromIde
}
