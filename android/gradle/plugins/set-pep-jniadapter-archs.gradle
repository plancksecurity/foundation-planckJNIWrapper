import org.gradle.process.internal.ExecException
ext.adb = "$System.env.ANDROID_SDK/platform-tools/adb"

tasks.register('setpEpJNIAdapterArchs') {

    description = "Prepare pEpJNIAdapter to build with the first archs of each connected device."

    doLast {
        def serialNos = getConnectedDevicesIds()
        if (serialNos.isEmpty()) {
            return
        }
        println("Connected devices: $serialNos")
        def abis = serialNos.collect { serialNo ->
            convertAbiName(execCommand("${adb} -s ${serialNo} shell getprop ro.product.cpu.abilist", true).trim().split(",")[0])
        }.toSet()
        def sb = new StringBuilder()
        for (String s : abis) {
            sb.append(s)
            sb.append(" ")
        }
        if (!abis.isEmpty()) {
            project.archsToCompile = sb.toString().trim()
            println("got archs to compile: ${project.archsToCompile}")
        }
    }
}

private List<String> getConnectedDevicesIds(boolean verbose = true) {
    def lines = execCommand(['bash', '-c', "echo \$(${adb} devices) | grep -v 'devices' | grep 'device'"], true, verbose).readLines()
    if (lines.isEmpty()) return lines
    return lines.collect { line ->
        line.substring(0, line.indexOf("device")).trim()
    }
}

static String convertAbiName(name) {
    if (name == "armeabi-v7a") return "arm"
    else if (name == "arm64-v8a") return "arm64"
    else return name
}

private String execCommand(String command, boolean captureOutput = false, boolean verbose = false) {
    List<String> splitCommand = command.split(' ')
    return execCommand(splitCommand, captureOutput, verbose)
}

private String execCommand(List<String> command, boolean captureOutput = false, boolean verbose = false) {
    def stdout = captureOutput ? new ByteArrayOutputStream() : null
    try {
        exec {
            if (verbose) {
                println("running command: ${command.join(' ')}")
            }
            commandLine = command
            if (stdout != null) {
                standardOutput = stdout
            }
        }
    } catch (ExecException e) {
        System.err.println("COMMAND ${command.join(' ')} FAILED:")
        e.printStackTrace()
    }
    String out = null
    if (stdout != null) {
        out = stdout.toString()
        stdout.close()
    }
    return out
}
