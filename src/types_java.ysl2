function "toJava" {
    param "type";

    choose {
        when "$type='stringlist'" > Vector<String>
        when "$type='string'" > String
        when "$type='message'" > Message
        when "$type='identity'" > Identity
        when "$type='identitylist'" > Vector<Identity>
        when "$type='timestamp'" > Date
        when "$type='EncFormat'" > Message.EncFormat
        when "$type='bloblist'" > Vector<Blob>
        when "$type='stringpairlist'" > ArrayList<Pair<String, String>>
        when "$type='message'" > Message
        when "$type='void'" > void

        otherwise call "CamelCase" with "text", "$type";
    }
}

function "toJavaDeclare" {
    param "type";

    choose {
        when "$type='stringlist'" error | # cannot declare "stringlist"
        when "$type='string'" error | # cannot declare "string"
        when "$type='message'" > Message
        when "$type='identity'" > _Identity
        when "$type='identitylist'" | # cannot declare "identitylist"
        when "$type='timestamp'" | # cannot declare "timestamp"
        when "$type='EncFormat'" > Message.EncFormat
        when "$type='bloblist'" | # cannot declare "bloblist"
        when "$type='stringpairlist'" | # cannot declare "stringpairlist"
        when "$type='message'" > Message
        when "$type='Color'" > Color

        otherwise error | # cannot declare "«$type»"
    }
}

function "toSig" {
    param "type";

    choose {
        when "$type='string'" error | # cannot declare "string"
        otherwise {
            > L
            choose {
                when "$type='stringlist'" > java.util.Vector
                when "$type='string'" error | # cannot declare "string"
                when "$type='message'" > org.pEp.jniadapter.Message
                when "$type='identity'" > org.pEp.jniadapter._Identity
                when "$type='identitylist'" > java.util.Vector
                when "$type='timestamp'" > java.util.Date
                when "$type='EncFormat'" > org.pEp.jniadapter.Message.EncFormat
                when "$type='bloblist'" > java.util.Vector
                when "$type='stringpairlist'" > java.util.ArrayList
                when "$type='message'" > org.pEp.jniadapter.Message
                when "$type='Color'" > org.pEp.jniadapter.Color
            }
            > ;
        }
    }
}

function "toIntermediate" {
    param "type";

    choose {
        when "$type='stringlist'" > Vector<byte[]>
        when "$type='stringpairlist'" > ArrayList<Pair<byte[], byte[]>>
        when "$type='string'" > byte[]
        when "$type='identity'" > _Identity
        when "$type='identitylist'" > Vector<_Identity>
        when "$type='bloblist'" > Vector<_Blob>

        otherwise call "toJava" with "type", "$type";
    }
}

define operator "†([$@]?[a-zA-Z0-9_]+)" as call "toJava" with "type", "%1";
define operator "¡([$@]?[a-zA-Z0-9_]+)" as call "toIntermediate" with "type", "%1";

