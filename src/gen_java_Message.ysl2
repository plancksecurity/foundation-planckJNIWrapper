include yslt.yml2

tstylesheet {
    include ./types_java.ysl2

    template "/namespace[@name='pEp']" apply "struct|interface|enum", 0;

    template "interface" {
        const "cname" call "toJava" with "type", "@name";
        document("org/pEp/jniadapter/{$cname}.java", "text")
            ||
            package org.pEp.jniadapter;

            import java.util.ArrayList;
            import java.util.Vector;

            final public class «$cname» extends AbstractEngine {
                public «$cname»() throws pEpException { }

                `` apply "interface|method"
            }
            ||
    }

    template "struct" {
        const "cname" call "toJava" with "type", "@name";
        document("org/pEp/jniadapter/{$cname}.java", "text")
            ||
            package org.pEp.jniadapter;

            import java.util.ArrayList;
            import java.util.Vector;
            import java.util.Date;
            import java.util.HashMap;

            public class «$cname» {
                `` apply "enum", mode=inner
                `` apply "*[name(.)!='enum']", mode=entry
            }
            ||
    }

    template "enum" {
        const "jname" call "toJava" with "type", "@name";
        document("org/pEp/jniadapter/{$jname}.java", "text")
            ||
            package org.pEp.jniadapter;

            import java.util.HashMap;
            
            `` apply ".", 0, mode=inner
            ||
    }

    template "enum", mode=inner {
        const "jname" call "CamelCase" with "text", "@name";
        ||
        public enum «$jname» {
            `` apply "*", mode=value
            ;

            public final int value;
            public static final HashMap<Integer, «$jname»> tag =
                    new HashMap<Integer, «$jname»>();

            «$jname»(int value) {
                this.value = value;
                fill(value);
            }

            private void fill(int value) {
                tag.put(value, this);
            }
        }

        ||
    }

    template "method"
        ||
        public native void «@name»(
        `` apply "parm", 2
            ) throws pEpException;`if "position()!=last()" > \n`
        ||

    template "parm" {
        const "dir", "name(*[1])";
        const "type", "name(*[2])";
        const "name", "name(*[3])";

        | `call "toJava" with "type", "$type"` «translate($name,'-','_')»`if "position()!=last()" > ,`
    }

    template "*", mode=entry {
        const "type" call "toJava" with "type", "name(.)";
        const "itype" call "toIntermediate" with "type", "name(.)";
        const "name" call "toJava" with "type", "name(*[position()=1])";

        choose {
            when "$itype != $type"
            ||
            private native «$itype» _get«$name»();
            private native void _set«$name»(«$itype» value);
            public «$type» get«$name»() {
                return AbstractEngine.toUTF16(_get«$name»());
            }
            public void set«$name»(«$type» value) {
                _set«$name»(AbstractEngine.toUTF8(value));
            }

            ||
            otherwise
            ||
            public native «$itype» get«$name»();
            public native void set«$name»(«$itype» value);

            ||
        }
    }

    template "*", mode=value {
        const "name" call "toJava" with "type", "name(.)";
        | «$name» («.»)`if "position()!=last()" > , `
    }
}

