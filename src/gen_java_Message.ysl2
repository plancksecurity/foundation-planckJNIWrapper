include yslt.yml2

tstylesheet {
    include ./types_java.ysl2

    template "/namespace[@name='pEp']" apply "struct|interface", 0;

    template "interface" {
        const "cname" call "toJava" with "type", "@name";
        document("org/pEp/jniadapter/{$cname}.java", "text")
            ||
            package org.pEp.jniadapter;

            import java.util.ArrayList;

            final public class «$cname» extends AbstractEngine {
                public «$cname»() throws pEpException { }
                `` apply "namespace/interface/method";
            }
            ||
    }

    template "struct" {
        const "cname" call "toJava" with "type", "@name";
        document("org/pEp/jniadapter/{$cname}.java", "text")
            ||
            package org.pEp.jniadapter;

            import java.util.ArrayList;
            import java.util.Date;
            import java.util.HashMap;

            public class «$cname» {
                `` apply "enum"
                `` apply "*[name(.)!='enum']", mode=entry

            }
            ||
    }

    template "enum"
        ||
        public enum «@name» {
            `` apply "*", mode=value
            ;

            public final int value;
            public static final HashMap<Integer, «@name»> tag =
                    new HashMap<Integer, «@name»>();

            «@name»(int value) {
                this.value = value;
                fill(value);
            }

            private void fill(int value) {
                tag.put(value, this);
            }
        }

        ||

    template "method"
        ||
        public native void «@name»(
        `` apply "parm", 2
            ) throws pEpException;`if "position()!=last()" > \n`
        ||

    template "parm" {
        const "dir", "name(*[1])";
        const "type", "name(*[2])";
        const "name", "name(*[3])";

        | `call "toJava" with "type", "$type"` «translate($name,'-','_')»`if "position()!=last()" > ,`
    }

    template "*", mode=entry {
        const "type", "name(.)";
        const "name", "name(*[position()=1])";

        ||
        private native †$type _©$name();
        private native void _©$name(†$type value);

        ||
    }
    template "*", mode=value | «name(.)» («.»)`if "position()!=last()" > , `
}

